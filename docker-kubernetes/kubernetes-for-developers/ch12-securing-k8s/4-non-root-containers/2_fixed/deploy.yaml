---
#
#
# As a developer of a non-administrative application that run on Kubernetes, you will more
# likely be using these properties to limit what functions your Pod can use in order to reduce
# risk. Contrasting the 3-pod-security-context/admin-ds.yaml example, here is the PodSpec for a
# Pod with locked-down privileges that runs as the non-root user and cannot elevate privileges.
#
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timeserver
spec:
  replicas: 1
  selector:
    matchLabels:
      pod: timeserver-pod
  template:
    metadata:
      labels:
        pod: timeserver-pod
    spec:
      containers:
        - name: timeserver-container
          image: docker.io/wdenniss/timeserver:7
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
#
#
# By default, any Pod is free to request whatever capabilities it wants, even root access
# (unless your Kubernetes platform restricts this, as some nodeless platforms do). As the cluster
# operator, this may be something you want to restrict as it basically means that anyone with
# kubectl access to the cluster has root privileges. Furthermore, there are some other
# recommended principles for hardening clusters, like not running containers as the root user
# (which is distinct from having root on the node), something that is enforced by the
# runAsNonRoot: true configuration in this example.
#
