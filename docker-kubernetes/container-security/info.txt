

Risks, Threats, and Mitigations
- A risk is a potential problem, and the effects of that problem if it were to occur.
- A threat is a path to that risk occurring.
- A mitigation is a countermeasure against a threat—something you can do to prevent
  the threat or at least reduce the likelihood of its success.


== Defense in Depth
   The principle of defense in depth tells us that you should apply layers of protection. If an attacker is able to
   breach one defense, another layer should prevent them from harming your deploy‐ ment or exfiltrating your data

Reducing the Attack Surface
  As a general rule, the more complex a system is, the more likely it is that there is a
  way to attack it. Eliminating complexity can make the system harder to attack

Limiting the Blast Radius
  The concept of segmenting security controls into smaller subcomponents or “cells” means that should the worst 
  happen, the impact is limited. Containers are well-suited to this principle, because by dividing an architecture 
  into many instances of a microservice, the container itself can act as a security boundary.

Segregation of Duties
  Related to both least privilege and limiting blast radius is the idea of segregating
  duties so that, as much as possible, different components or people are given author‐
  ity over only the smallest subset of the overall system that they need.
  

System Calls
  Applications run in what’s called user space, which has a lower level of privilege than the operating system 
  kernel. If an application wants to do something like access a file, communicate using a network, or even find 
  the time of day, it has to ask the kernel to do it on the application’s behalf. The programmatic interface 
  that the user space code uses to make these requests of the kernel is known as the system call or syscall 
  interface. There are some 300+ different system calls, with the number varying according to the
  version of Linux kernel. Here are a few examples:
-- read:    read data from a file
-- write:   write data to a file
-- open:    open a file for subsequent reading or writing
-- execve:  run an executable program
-- chown:   change the owner of a file
-- clone:   create a new process
  Application developers rarely if ever need to worry about system calls directly, as they are usually wrapped 
  in higher-level programming abstractions. The lowest-level abstraction you’re likely to come across as an app 
  developer is the glibc library or the Golang syscall package. In practice these are usually wrapped by 
  higher layers of abstractions as well.




