You should be able to log in to your new x virtual machine by running the following:
$ vagrant ssh

Tell Vagrant to output its SSH configuration by typing the following:
$ vagrant ssh-config

Confirm that you can start an SSH session from the command line by using this information. 
The SSH command also works with a relative path from the playbooks directory:
$ ssh vagrant@127.0.0.1 -p 2222 -i .vagrant/machines/default/virtualbox/private_key

# tell Ansible to connect to the server named testserver
$ ansible testserver -i inventory/vagrant.ini -m ping

# use the command module to run the uptime command (you can ommit:  -m command)
$ ansible testserver -m command -a uptime

# If you need privileged access, pass in the -b or --become flag to tell Ansible to become the root user.
$ ansible testserver -b -a "tail /var/log/syslog"

# You are not restricted to the ping and command modules when using the ansible command-line tool:
# For example, you can install NGINX on Ubuntu by using the following command
$ ansible testserver -b -m package -a name=nginx


# You can force Vagrant to run the provisioner against a running virtual machine as follows:
$ vagrant provision

# You can also reboot a virtual machine and run the provisioner after reboot:
$ vagrant reload --provision

Similarly, you can start up a halted virtual machine and have Vagrant run the provisioner:
$ vagrant up --provision

# In the Vagrantfile, we have a couple of constructs to create one guest by name when we enter:
$ vagrant up focal


# To show the documentation for the service module, run this:
$ ansible-doc service     OR          ansible-doc -l | grep ^apt

# You should also check the Ansible syntax of your playbook before running it: 
$ ansible-playbook --syntax-check webservers-tls.yml
$ ansible-lint webservers-tls.yml
$ yamllint webservers-tls.yml
$ ansible-inventory --host testserver -i inventory/vagrant.ini
$ vagrant validate


# The simplest inventory is a comma-separated list of hostnames, which you can do even without a server:
$ ansible all -i 'localhost,' -a date

# we can check whether the clocks on the machines are roughly synchronized: 
$ ansible all -a "date"           OR               $ ansible '*' -a "date"

# To get the details of the individual host: 
$ ansible-inventory -i inventory/hosts --host=vagrant2

# get a list of all of the groups in dynamic inventory: 
$ ./inventory/vagrant.py --list  

# which machines are currently running
$ vagrant status

# Viewing All Facts Associated with a Server
$ ansible ubuntu -m setup

# filter parameter that lets you filter by fact name, or by specifying a glob. 
$ ansible all -m setup -a 'filter=ansible_all_ipv6_addresses'

# Setting a variable from the command line
$ ansible-playbook 4-12-greet.yml -e greeting=hiya

# You have to put single quotes around the entire 'greeting="hi there"' so that the
# shell interprets that as a single argument to pass to Ansible, and you have to put
# double quotes around "hi there" so that Ansible treats that message as a single string
$ ansible-playbook greet.yml -e 'greeting="hi there"'

# You can pass this file (greet.yml) to the command line like this:
$ ansible-playbook greet.yml -e @5-14-greetvars.yml

# debug a variable 
$ ansible-playbook debug-variable.yml -e variable=ansible_python



