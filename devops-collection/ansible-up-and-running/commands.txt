You should be able to log in to your new x virtual machine by running the following:
$ vagrant ssh

Tell Vagrant to output its SSH configuration by typing the following:
$ vagrant ssh-config

Confirm that you can start an SSH session from the command line by using this information. 
The SSH command also works with a relative path from the playbooks directory:
$ ssh vagrant@127.0.0.1 -p 2222 -i .vagrant/machines/default/virtualbox/private_key

# tell Ansible to connect to the server named testserver
$ ansible testserver -i inventory/vagrant.ini -m ping

# use the command module to run the uptime command (you can ommit:  -m command)
$ ansible testserver -m command -a uptime

# If you need privileged access, pass in the -b or --become flag to tell Ansible to become the root user.
$ ansible testserver -b -a "tail /var/log/syslog"

# You are not restricted to the ping and command modules when using the ansible command-line tool:
# For example, you can install NGINX on Ubuntu by using the following command
$ ansible testserver -b -m package -a name=nginx


# You can force Vagrant to run the provisioner against a running virtual machine as follows:
$ vagrant provision

# You can also reboot a virtual machine and run the provisioner after reboot:
$ vagrant reload --provision

Similarly, you can start up a halted virtual machine and have Vagrant run the provisioner:
$ vagrant up --provision

# In the Vagrantfile, we have a couple of constructs to create one guest by name when we enter:
$ vagrant up focal


# To show the documentation for the service module, run this:
$ ansible-doc service     OR          ansible-doc -l | grep ^apt

# You should also check the Ansible syntax of your playbook before running it: 
$ ansible-playbook --syntax-check webservers-tls.yml
$ ansible-lint webservers-tls.yml
$ yamllint webservers-tls.yml
$ ansible-inventory --host testserver -i inventory/vagrant.ini
$ vagrant validate


# The simplest inventory is a comma-separated list of hostnames, which you can do even without a server:
$ ansible all -i 'localhost,' -a date

# we can check whether the clocks on the machines are roughly synchronized: 
$ ansible all -a "date"           OR               $ ansible '*' -a "date"

# To get the details of the individual host: 
$ ansible-inventory -i inventory/hosts --host=vagrant2

# get a list of all of the groups in dynamic inventory: 
$ ./inventory/vagrant.py --list  

# which machines are currently running
$ vagrant status

# Viewing All Facts Associated with a Server
$ ansible ubuntu -m setup

# filter parameter that lets you filter by fact name, or by specifying a glob. 
$ ansible all -m setup -a 'filter=ansible_all_ipv6_addresses'

# Setting a variable from the command line
$ ansible-playbook 4-12-greet.yml -e greeting=hiya

# You have to put single quotes around the entire 'greeting="hi there"' so that the
# shell interprets that as a single argument to pass to Ansible, and you have to put
# double quotes around "hi there" so that Ansible treats that message as a single string
$ ansible-playbook greet.yml -e 'greeting="hi there"'

# You can pass this file (greet.yml) to the command line like this:
$ ansible-playbook greet.yml -e @5-14-greetvars.yml

# debug a variable 
$ ansible-playbook debug-variable.yml -e variable=ansible_python

# prints out the names of all the tasks in a playbook.
$ ansible-playbook --list-tasks mezzanine.yml

# You can verify that agent forwarding is working by using Ansible to list the known keys:
$ ansible web -a "ssh-add -L"

# Another useful check is to verify that you can reach GitHub’s SSH server:
$ ansible web -a "ssh -T git@github.com"

# checks that your playbook’s syntax is valid.
$ ansible-playbook --syntax-check playbook.yml

# outputs the hosts against which the playbook will run.
$ ansible-playbook --list-hosts playbook.yml

# outputs the tasks against which the playbook will run.
$ ansible-playbook --list-tasks playbook.yml


Diff (Show File Changes)
#   The -D and -diff flags output differences for any files that are changed on the
#   remote machine. It’s a helpful option to use in conjunction with --check to show how
#   Ansible would change the file if it were run normally:
$ ansible-playbook -D --check playbook.yml
$ ansible-playbook --diff --check playbook.yml
#   If Ansible would modify any files (e.g., using modules such as copy, file, template,
#   and lineinfile), it will show the changes in .diff format,


Running or skipping tags
  Use the -t tagnames or --tags tagnames flag to tell Ansible to run only plays and
  tasks that have certain tags. Use the --skip-tags tagnames flag to tell Ansible to skip
  plays and tasks that have certain tags
$ ansible-playbook -tnxinx playbook.yml
$ ansible-playbook --tags=xinx,database playbook.yml
$ ansible-playbook --skip-tags=mezzanine playbook.yml


Limits
  Ansible allows you to restrict the set of hosts targeted for a playbook with a --limit
  flag to ansible-playbook. You can do a canary release this way, but be sure to set it
  up with an audit trail. The limit flag reduces the run of the playbook to a set of hosts
  defined by an expression. In the simplest example, it can be a single hostname:
$ ansible-playbook -vv --limit db playbook.yml


# ansible-galaxy can also be used to generate scaffolding, an initial set of files and directories 
  involved in a role: The --init-path flag tells ansible-galaxy the location of your 
  roles directory. If you don’t specify it, the role files will be created in your current directory
$ ansible-galaxy role init --init-path playbooks/roles web


# You can install a role with the ansible-galaxy install command:
$ ansible-galaxy install oefenweb.ntp

# You can list installed roles as follows:
$ ansible-galaxy list

# You can remove a role with the remove command:
$ ansible-galaxy remove oefenweb.ntp

# store secrets 
$ mkdir -p group_vars/all/
$ ansible-vault create group_vars/all/vault

# ansible-playbook needs to prompt us for the password of the encrypted file, or it
  will simply error out. Do so by using the --ask-vault-pass argument:
$ ansible-playbook --ask-vault-pass playbook.yml

# provide password from file 
$ ansible-playbook playbook.yml --vault-password-file ~/password.txt
#  If the argument to --vault-password-file has the executable bit set, Ansible will
#  execute it and use the contents of standard out as the vault password. This allows
#  you to use a script to supply the password to Ansible.

# encrypt for specific environment  
$ ansible-vault encrypt --encrypt-vault-id=prod group_vars/prod/vault


# Limiting which hosts run
  $ ansible-playbook -l <pattern> playbook.yml
  $ ansible-playbook --limit <pattern> playbook.yml
  # You can use the pattern syntax to specify arbitrary combinations of hosts. For example:
  $ ansible-playbook -l 'staging:&database' playbook.yml


The --step flag has Ansible prompt you before running each task, like this:
$ ansible-playbook --step playbook.yml
╒═════════════════════════════════════════════════════════════════════╕
  Perform task: Install packages (y/n/c):                             
  You can choose to execute the task (y), skip it (n), or continue    
  running the rest of the playbook without Ansible prompting you (c). 
╘═════════════════════════════════════════════════════════════════════╛

The --start-at-task taskname flag tells Ansible to start running the playbook at
the specified task, instead of at the beginning. 


# run docker images
$ ansible localhost -m docker_container -a "name=test-ghost image=ghost ports=8000:2368"

# To stop and remove the container, run:
$ ansible localhost -m docker_container -a "name=test-ghost state=absent"












