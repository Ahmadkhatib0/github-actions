You should be able to log in to your new x virtual machine by running the following:
$ vagrant ssh

Tell Vagrant to output its SSH configuration by typing the following:
$ vagrant ssh-config

Confirm that you can start an SSH session from the command line by using this information. 
The SSH command also works with a relative path from the playbooks directory:
$ ssh vagrant@127.0.0.1 -p 2222 -i .vagrant/machines/default/virtualbox/private_key

# tell Ansible to connect to the server named testserver
$ ansible testserver -i inventory/vagrant.ini -m ping

# use the command module to run the uptime command (you can ommit:  -m command)
$ ansible testserver -m command -a uptime

# If you need privileged access, pass in the -b or --become flag to tell Ansible to become the root user.
$ ansible testserver -b -a "tail /var/log/syslog"

# You are not restricted to the ping and command modules when using the ansible command-line tool:
# For example, you can install NGINX on Ubuntu by using the following command
$ ansible testserver -b -m package -a name=nginx


You can force Vagrant to run the provisioner against a running virtual machine as follows:
$ vagrant provision

You can also reboot a virtual machine and run the provisioner after reboot:
$ vagrant reload --provision

Similarly, you can start up a halted virtual machine and have Vagrant run the provisioner:
$ vagrant up --provision

In the Vagrantfile, we have a couple of constructs to create one guest by name when we enter:
$ vagrant up focal


To show the documentation for the service module, run this:
$ ansible-doc service     OR          ansible-doc -l | grep ^apt





