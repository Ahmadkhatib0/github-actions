Configuring Terraform for Azure
  Before writing the Terraform code in which to provision a cloud infrastructure such as Azure, 
  we must configure Terraform to allow the manipulation of resources in an Azure subscription.
  To do this, first, we will create a new Azure Service Principal (SP) in Azure Active
  Directory (AD), which, in Azure, is an application user who has permission to manage Azure resources.
  For this Azure SP, we have to assign to it the contributing permissions on the subscription
  in which we will create resources.


The following is a template az cli script that you have to run to create an SP. Here, you
have to enter your SP name, role, and scope:
 ╒══════════════════════════════════════════════════════════════════╕
   az ad sp create-for-rbac --name="<ServicePrincipal name>"        
   --role="Contributor" --scopes="/subscriptions/<subscription Id>" 
 ╘══════════════════════════════════════════════════════════════════╛
 
Take a look at the following example:
╒═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╕
  az ad sp create-for-rbac --name="SPForTerraform" --role="Contributor" --scopes="/subscriptions/8921-1444-..." 
╘═══════════════════════════════════════════════════════════════════════════════════════════════════════════════╛
This sample script creates a new SP, named SPForTerraform, and gives it the
  contributor permission on the subscription ID, that is, 8921....

The creation of this Azure SP returns three pieces of identification information:
  • The application ID, which is also called the client ID
  • The client secret
  • The tenant ID



----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Protecting the state file with a remote backend
 To create an Azure storage account and a blob container, we can use either the Azure portal 
 (https://docs.microsoft.com/en-gb/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal)
 or an az cli script:
 ╒═══════════════════════════════════════════════════════════════════════════════╕

    # 1-Create resource group                                                     
    az group create --name MyRgRemoteBackend --location westeurope                

    # 2-Create storage account                                                    
    az storage account create --resource-group MyRgRemoteBackend --name           
    storageremotetf --sku Standard_ LRS --encryption-services blob                

    # 3-Get storage account key                                                   
    ACCOUNT_KEY=$(az storage account keys list --resource-group MyRgRemoteBackend 
    --account-name storageremotetf --query [0].value -o tsv)                      

    # 4-Create blob container                                                     
    az storage container create --name tfbackends --account-name storageremotetf --account-key $ACCOUNT_KEY                               

 ╘═══════════════════════════════════════════════════════════════════════════════╛
 
This script creates a MyRgRemoteBackend resource group and a storage account, called storageremotetf.
Then, the script retrieves the key account from the storage account and creates a
blob container, tfbackends, inside this storage account.
This script can be run in Azure Cloud Shell, and the advantage of using a script rather
than using the Azure portal is that this script can be integrated into a CI/CD process





