-- Software is written in numerous programming languages and uses various dependencies 
   and frameworks. This leads to a scenario called the matrix of hell.
   
-- A virtual machine emulates an operating system using a technology called a Hypervisor. A Hypervisor 
   can run as software on a physical host OS or run as firmware on a bare-metal machine

-- OpenVZ was an early attempt at implementing features to provide virtual environments within 
   a Linux Kernel without using a guest OS layer, something that we now call containers.
   
-- Cgroups play a role in limiting the amount of computing resources a group of processes can use

-- types of container networks that you can define: 
   - None: This is a fully isolated network, and your containers cannot communicate with the external world.
     They are assigned a loopback interface and cannot connect with an external network interface. You can 
     use it if you want to test your containers, stage your container for future use, or run a container 
     that does not require any external connection, such as batch processing.

   - Bridge: The bridge network is the default network type in most container runtimes, including Docker,
     which uses the docker0 interface for default containers. The bridge network manipulates IP tables 
     to provide Network Address Translation (NAT) between the container and host network, allowing 
     external network connectivity. It also does not result in port conflicts as it enables network 
     isolation between containers running on a host. Therefore, you can run multiple applications
     that use the same container port within a single host. A bridge network allows containers within 
     a single host to communicate using the container IP addresses.
     However, they don't permit communication to containers running on a different
     host. Therefore, you should not use the bridge network for clustered configuration

   - Host: Host networking uses the network namespace of the host machine for all the containers. It is 
      similar to running multiple applications within your host. While a host network is simple to implement,
      visualize, and troubleshoot, it is prone to port-conflict issues. While containers use the host 
      network for all communications, it does not have the power to manipulate the host network 
      interfaces unless it is running in privileged mode. Host networking does not use NAT, so it is fast and
      communicates at bare metal speeds. You can use host networking to optimize performance. However,
      since it has no network isolation between containers, from a security and management point of 
      view, in most cases, you should avoid using the host network.
      
    - Underlay: Underlay exposes the host network interfaces directly to containers. This means you can 
      choose to run your containers directly on the network interfaces instead of using a bridge network.
      There are several underlay networks – notably MACvlan and IPvlan. MACvlan allows you to assign a
      MAC address to every container so that your container now looks like a physical device. It is 
      beneficial for migrating your existing stack to containers, especially when your application needs
      to run on a physical machine. MACvlan also provides complete isolation to your host networking, 
      so you can use this mode if you have a strict security requirement. MACvlan has limitations 
      in that it cannot work with network switches with a security policy to disallow MAC spoofing.
      It is also constrained to the MAC address ceiling of some network interface cards, such as 
      Broadcom, which only allows 512 MAC addresses per interface.

    - Overlay: Don't confuse overlay with underlay – even though they seem like antonyms, they are not.
      Overlay networks allow communication between containers running on different host machines via a 
      networking tunnel. Therefore, from a container's perspective, it seems that they are interacting 
      with containers on a single host, even when they are located elsewhere. It overcomes the bridge network's
      limitation and is especially useful for cluster configuration, especially when you're using a container 
      orchestrator such as Kubernetes or Docker Swarm. Some popular overlay technologies that are used 
      by container runtimes and orchestrators are flannel, calico, and vxlan.

-- Treat containers like ephemeral workloads (ephemeral workloads are temporary workloads that are 
   dispensible , and if one disappears, you can spin up another one without it having any functional impact). 

-- Service mesh (infrastructure components that allow you to discover, list, manage, and allow 
   communication between multiple components (services) of your microservices application) 

--  Docker stores volumes in /var/lib/docker/volumes and assumes that no one apart 
    from the Docker daemon can modify the data on them.

-- volumes provide the following features:
    • Provide some isolation with the host filesystems. If you don't want other processes
      to interact with the data, then a volume should be your choice.
    • You can share a volume with multiple containers as well.
    • Volumes can either be named or anonymous. Docker stores anonymous volumes in
      a directory with a unique random name.
    • Volumes also enable you to store data remotely or in a cloud provider by using volume drivers.
      That helps a lot if you have multiple containers sharing the same volume to provide a
      multi-instance active-active configuration.
    • The data in the volume persists even when the containers are deleted.

-- tmpfs mounts store data in memory. They do not store any data on disk neither the container
   nor the host filesystem. You can use them to store sensitive information and the non-persistent
   state during the lifetime of your container.

-- Mounting volumes
    If you mount a host directory that already contains files to an empty volume of the
    container, the container can see the files stored in the host. It is an excellent way to
    pre-populate files for your container(s) to use. If the directory does not exist in the host
    filesystem, though, Docker creates the directory automatically. If the volume is non-empty
    and the host filesystem already contains files, then Docker obscures the mount. That
    means while you won't be able to see the original files while the Docker volume is mounted 
    to it, the files are not deleted, and you can recover them by unmounting the Docker volume.

There are numerous storage driver types. Some of the popular ones are as follows:
--  overlay2: This is a production-ready and the preferred storage driver for Docker
    and works in most environments except CentOS and RHEL 7 and below.
    
--  aufs: This was the preferred storage driver for Docker 18.04 and below running on
    Ubuntu 14.04 and kernel 13.3 and below as they did not support overlay2. It was
    a stable and production-ready driver, but overlay2 has overtaken it.
    
--  devicemapper: This is the preferred driver for devices running RHEL and
    CentOS 7 and below that do not support overlay2. You can use this driver if you
    have write-intensive activities in your containers.
--  btrfs and zfs: These drivers are write-intensive and provide many features, such as allowing 
    snapshots, and can only be used if you are using btrfs or zfs filesystems within your host.
--  vfs: This storage driver should be used only if there is no copy-on-write filesystem
    available. It is extremely slow, and you should not use it in production.

-- TO Configure a storage drive:  change "storage-driver" in the /etc/docker/daemon.json file 
   NOTE: Changing the storage driver will wipe out existing containers from the disk
   
   
-- Nginx is a long-running process, also known as a daemon.

+--------------------------------------------------------------------------------------------------------+
| ... docker run -d --name nginx --restart unless-stopped --memory 1000M --memory-reservation 250M nginx |
+--------------------------------------------------------------------------------------------------------+
-- memory 1000M: Limit the container memory consumption to 1000M. If
      the memory exceeds this limit, the container will stop and act according to the --restart flag.
-- memory-reservation 250M: Allocate a soft limit of 250M memory to the
      container if the server runs out of memory.
-- Consider using unless-stopped instead of always, as it gives you control to stop 
      the container manually if you want to do some maintenance.


-- Logging drivers:   the following logging drivers are available:
... none: There are no logs available for the container, and therefore they are not stored anywhere.

... local: Logs are stored locally in a custom format and therefore minimizes overhead.

... json-file: The log files are stored in a JSON format, and this is the default Docker logging driver.

... syslog: Uses syslog for storing the Docker logs as well. This option makes sense
    when you use syslog as your default logging mechanism. 

... journald: Uses journald to store Docker logs. You can use the journald
    command line to browse the container logs and the Docker daemon logs.
    
... gelf: Sends logs to a Graylog Extended Log Format (GELF) endpoint such as Graylog or Logstash.

... fluentd: Sends logs to Fluentd.

... awslogs: Sends logs to AWS CloudWatch.

... splunk: Sends logs to Splunk using the HTTP Event Collector.

... etwlogs: Sends logs to Event Tracing for Windows (ETW) events. You can use it only on Windows platforms.

... gcplogs: Sends logs to Google Cloud Logging.

... logentries: Sends logs to Rapid7 Logentries.
