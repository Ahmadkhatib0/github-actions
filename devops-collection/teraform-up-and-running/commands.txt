
teraform inti 
teraform plan 
terraform apply

# show graph of dependencies
$ terraform graph

If you don’t want to deal with an interactive prompt, you can provide a 
  value for the variable via the -var command-line option:
$ terraform plan -var "server_port=8080"

# see the value of output vars, or a specific variable
$ terraform output [ OUTPUT_NAME ] 


$ terraform workspace show

$ terraform workspace new example1

# if you do: teraform plan:  you will see that Terraform wants to create a totally new EC2 
  Instance from scratch! That’s because the state files in each workspace are isolated from 
  one another, and because you’re now in the example1 workspace, (so this is the workspace isloation level)

$ terraform workspace list

# switch to another workspace
$ terraform workspace select example1


# the Terraform console is read-only, so you don’t need to worry about accidentally changing infrastructure or state.
$ terraform console 
# > format("%.3f", 3.14159265359)             =>>>          3.142


# using tfenv 
$ tfenv install  # | use | list  


Lock Files with Multiple Operating Systems By default, Terraform only records checksums for the platform
  you ran init on: for example, if you ran init on Linux, then Terraform will only record the checksums 
  for Linux provider binaries in .terraform.lock.hcl. If you check that file in and, later on, you run init 
  on that code on a Mac, you’ll get an error, as the Mac checksums won’t be in the .terraform.lock.hcl file. 
  If your team works across multiple operating systems, you’ll need to run the terraform providers lock 
  command to record the checksums for every platform you use:
    terraform providers lock \
      -platform=windows_amd64 \ # 64-bit Windows
      -platform=darwin_amd64 \ # 64-bit macOS
      -platform=darwin_arm64 \ # 64-bit macOS (ARM)
      -platform=linux_amd64
       # 64-bit Linux
