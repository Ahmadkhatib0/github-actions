
teraform inti 
teraform plan 
terraform apply

# show graph of dependencies
$ terraform graph

If you don’t want to deal with an interactive prompt, you can provide a 
  value for the variable via the -var command-line option:
$ terraform plan -var "server_port=8080"

# see the value of output vars, or a specific variable
$ terraform output [ OUTPUT_NAME ] 


$ terraform workspace show

$ terraform workspace new example1

# if you do: teraform plan:  you will see that Terraform wants to create a totally new EC2 
  Instance from scratch! That’s because the state files in each workspace are isolated from 
  one another, and because you’re now in the example1 workspace, (so this is the workspace isloation level)

$ terraform workspace list

# switch to another workspace
$ terraform workspace select example1


# the Terraform console is read-only, so you don’t need to worry about accidentally changing infrastructure or state.
$ terraform console 
# > format("%.3f", 3.14159265359)             =>>>          3.142


# using tfenv 
$ tfenv install  # | use | list  


Lock Files with Multiple Operating Systems By default, Terraform only records checksums for the platform
  you ran init on: for example, if you ran init on Linux, then Terraform will only record the checksums 
  for Linux provider binaries in .terraform.lock.hcl. If you check that file in and, later on, you run init 
  on that code on a Mac, you’ll get an error, as the Mac checksums won’t be in the .terraform.lock.hcl file. 
  If your team works across multiple operating systems, you’ll need to run the terraform providers lock 
  command to record the checksums for every platform you use:
    terraform providers lock \
      -platform=windows_amd64 \ # 64-bit Windows
      -platform=darwin_amd64 \ # 64-bit macOS
      -platform=darwin_arm64 \ # 64-bit macOS (ARM)
      -platform=linux_amd64
       # 64-bit Linux



# POLICIES AS CODE
Some teams prefer a more declarative language for defining their policies as code. In the last few years, 
  Open Policy Agent (OPA) has become a popular policy-as-code tool, as it allows your to capture you 
  company’s policies as code in a declarative language called Rego. For example, many companies have tagging policies 
  they want to enforce. A common one with Terraform code is to ensure that every resource that is managed by Terraform 
  has a ManagedBy = terraform tag. Here is a simple policy called enforce_tagging.rego you could use to check for this tag:
 ▲                                                ▲
 █ package terraform                              █
 █ allow {                                        █
 █ resource_change := input.resource_changes[_]   █
 █ resource_change.change.after.tags["ManagedBy"] █
 █ }                                              █
 █                                                █
 ▼                                                ▼

This policy will look through the changes in a terraform plan output, extract the tag ManagedBy, and set an OPA 
  variable called allow to true if that tag is set or undefined otherwise.
  Now, consider the following Terraform module: 
        resource "aws_instance" "example" {
           ami          = data.aws_ami.ubuntu.id
          instance_type = "t2.micro"
        }
        
This module is not setting the required ManagedBy tag. How can we catch that with OPA?
The first step is to run terraform plan and to save the output to a plan file:
$ terraform plan -out tfplan.binary

OPA only operates on JSON, so the next step is to convert the plan file to JSON using the terraform show command:
$ terraform show -json tfplan.binary > tfplan.json

Finally, you can run the opa eval command to check this plan file against the enforce_tagging.rego policy:
$ opa eval --data enforce_tagging.rego --input tfplan.json --format pretty data.terraform.allow 
  ->>>>>>>>>>>>>  undefined

Since the ManagedBy tag was not set, the output from OPA is undefined. Now, try setting the ManagedBy tag:
      resource "aws_instance" "example" {
          ami           = data.aws_ami.ubuntu.id
          instance_type = "t2.micro"
          tags          = {
             ManagedBy = "terraform"
           }
         }

Rerun terraform plan, terraform show, and opa eval:
$ terraform plan -out tfplan.binary
$ terraform show -json tfplan.binary > tfplan.json
$ opa eval --data enforce_tagging.rego --input tfplan.json --format pretty data.terraform.allow
  ->>>>>>>>>>>>>>> true
  
This time, the output is true, which means the policy has passed.

