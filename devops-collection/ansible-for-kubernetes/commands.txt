
# ping ansible
ansible localhost -m ping
ansible localhost -m ping -u devops --become

# Creating a new Ansible Vault is very straightforward:
$ ansible-vault create secret.yml
# You can use Ansible Vault in any Ansible Playbook by specifying the --vault-id@prompt parameter 
  in the command line.

# init a role called role-example in the current roles dir
$ ansible-galaxy role init role-example

# You can execute your requirements.yml role file using this ansible-galaxy command:
$ ansible-galaxy role install -r roles/requirements.yml
• role install parameter, which installs a role
• -r specifies the usage of the requirements.yml file under the roles directory

 installs the latest version of the community.general Ansible collection
$ ansible-galaxy collection install community.general

# execute the requirements.yml collection file (install multiple collections):
$ ansible-galaxy collection install -r collections/requirements.yml

# build the my_ee execuation environment 
$ ansible-builder build -t my_ee -v 3

# After executing the ansible-builder tool, you obtain the context directory with all the building 
  instructions and the my_ee container to execute your Ansible code. Once the container has been 
  built, you can execute your Ansible Playbook inside the Ansible Execution Environment using 
  the ansible-runner command: 

$ sudo dnf install ansible-runner # or: 
$ pip install ansible-runner

$ ansible-runner run -p ping.yml --inventory inventory --container-­image=my_ee .


# obtain a valid Kubernetes authentication token
$ kubectrl config set-credentials developer/foo.example.com –-username=developer --password=developer
• set-credentials developer/foo.example.com Creates a new credential named developer/foo.example.com 
  (I prefer to use the same cluster name, but you can specify any name)

# configure the cluster connection server:
$ k config set-cluster foo.example.com –-insecure-skip-tls -­verify=true –-server=https://foo.example.com
• set-cluster foo.example.com: Creates a new cluster named foo.example.com (you can specify any name)
• –-insecure-skip-tls-verify=true: Skips TLS certificates validation 
• –-server=https://foo.example.com: Specifies the cluster URI

# Then you can join in a context the cluster and credentials information:
$ kubectl config set-context default/foo.example.com/developer \
    –-user=developer/foo.example.com –-namespace=default –-cluster=foo.example.com
• set-context default/foo.example.com/developer: Creates a new context named 
    default/foo.example.com/developer (you can specify any name)
• –-user=developer/foo.example.com: Skips TLS certificates validation
• –-cluster=foo.example.com: Specifies the cluster configuration name

$ kubectl config use-context default/foo.example.com/developer


# creating virtual environment
$ python3 -m venv venv
$ source venv/bin/activate
$ pip3 install --upgrade pip setuptools
# then you can install e.g
$ pip3 install PyYAML jsonpatch kubernetes # or for ansible: 
$ ansible-galaxy collection install cloud.common
$ ansible-galaxy collection install kubernetes.core 

#  You can save all the Python libraries and their dependencies using the pip3 freeze
   command and save the result to requirements.txt. Sharing this file with someone else
   or another system will result in the same configuration of this virtual environment.
$ pip3 freeze > requirements.txt

# You can deactivate your virtual environment at any time and return to your system console. You 
  should activate the virtual environment every time you want to use it. The virtual environment 
  preserves all installed libraries and collections.
$ deactivate


# change the number of replicas from the current number to three of your nginx deployment:
$ kubectl scale deployment nginx --replicas=3

# scale down 
$ kubectl scale deployment nginx --replicas=1


# initialize a rolling update process to deploy the image nginx with tag 1.23 (e.g from 1.22)
$ kubectl set image deployments/nginx=nginx:1.23

# verify the status of the rolling update: 
$ kubectl rollout status deployment nginx

# rollback to the previous image if needed
$ kubectl rollout undo deployments nginx

# see logs for the rolling 
$ kubectl rollout history deployment nginx

