name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-fil: ${{ steps.publish.outputs.script-file }}
      #script-file is a up to you.. and steps is a context (like github)
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish Js filename
        id: publish # and identifier to access this step output
        # run: find dist/assets/*.js f -execdir echo '{}' ';' the original, (outputs js file names)
        run: find dist/assets/*.js f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
        # >> $GITHUB_OUTPUT this outputs some data to a storing file managed by github

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          # path: |
          #   dist
          #   package.json
          # package.json  this is redundant , but just as an example
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files # this will be unpacked automatically
      - name: Outputs content
        run: ls
      - name: Deploy
        run: echo "Deploying..."
